generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BasicUser {
  user_id     BigInt  @id
  password    String  @db.Char(60)
  is_approved Boolean @default(false)
  email       String  @unique(map: "email") @db.VarChar(254)
  User        User    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_BasicUser_1")
}

model Hashtag {
  hashtag_id      BigInt            @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(20)
  QuestionHashtag QuestionHashtag[]
}

model OauthUser {
  user_id    BigInt @id
  oauth_id   String @db.VarChar(50)
  oauth_type String @db.VarChar(20)
  User       User   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_OauthUser_1")

  @@unique([oauth_type, oauth_id], map: "oauth_type")
}

model Option {
  option_id   BigInt   @id @default(autoincrement())
  content     String   @db.VarChar(300)
  question_id BigInt
  Question    Question @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_Option_1")

  @@index([question_id], map: "FK_Question_TO_Option_1")
}

model Question {
  question_id       BigInt              @id @default(autoincrement())
  question          String              @db.VarChar(1000)
  question_type     String              @db.VarChar(10)
  user_id           BigInt
  answer            String              @db.VarChar(1000)
  created_at        DateTime            @db.DateTime(0)
  updated_at        DateTime            @db.DateTime(0)
  commentary        String              @db.VarChar(1000)
  difficulty        Float
  User              User                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Question_1")
  Option            Option[]
  QuestionHashtag   QuestionHashtag[]
  QuestionImage     QuestionImage[]
  QuestionLike      QuestionLike[]
  TestPaperQuestion TestPaperQuestion[]
  WorkbookQuestion  WorkbookQuestion[]

  @@index([user_id], map: "FK_User_TO_Question_1")
}

model QuestionHashtag {
  question_hashtag_id BigInt   @id @default(autoincrement())
  question_id         BigInt
  hashtag_id          BigInt
  Hashtag             Hashtag  @relation(fields: [hashtag_id], references: [hashtag_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Hashtag_TO_QuestionHashtag_1")
  Question            Question @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_QuestionHashtag_1")

  @@unique([question_id, hashtag_id], map: "question_id")
  @@unique([question_id, hashtag_id], map: "question_id_2")
  @@unique([hashtag_id, question_id], map: "hashtag_id")
}

model QuestionImage {
  question_image_id BigInt   @id @default(autoincrement())
  path              String   @db.VarChar(2083)
  question_id       BigInt
  Question          Question @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_QuestionImage_1")

  @@index([question_id], map: "FK_Question_TO_QuestionImage_1")
}

model QuestionLike {
  user_id     BigInt
  question_id BigInt
  Question    Question @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_QuestionLike_1")
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_QuestionLike_1")

  @@id([user_id, question_id])
  @@index([question_id], map: "FK_Question_TO_QuestionLike_1")
}

model Test {
  test_id      BigInt         @id @default(autoincrement())
  total_count  Int
  user_id      BigInt
  created_at   DateTime       @db.DateTime(0)
  updated_at   DateTime       @db.DateTime(0)
  timeout      Int
  User         User           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Test_1")
  TestPaper    TestPaper[]
  WorkbookTest WorkbookTest[]

  @@index([user_id], map: "FK_User_TO_Test_1")
}

model TestPaper {
  test_paper_id     BigInt              @id @default(autoincrement())
  test_id           BigInt
  correct_count     Int
  created_at        DateTime            @db.DateTime(0)
  updated_at        DateTime            @db.DateTime(0)
  is_completed      Boolean             @default(false)
  Test              Test                @relation(fields: [test_id], references: [test_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Test_TO_TestPaper_1")
  TestPaperQuestion TestPaperQuestion[]

  @@index([test_id], map: "FK_Test_TO_TestPaper_1")
}

model TestPaperQuestion {
  test_paper_question_id BigInt    @id @default(autoincrement())
  test_paper_id          BigInt
  question_id            BigInt
  written_answer         String    @db.VarChar(1000)
  is_correct             Boolean?
  review                 String?   @db.VarChar(1000)
  Question               Question  @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_TestPaperQuestion_1")
  TestPaper              TestPaper @relation(fields: [test_paper_id], references: [test_paper_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_TestPaper_TO_TestPaperQuestion_1")

  @@unique([test_paper_id, question_id], map: "test_paper_id")
  @@unique([test_paper_id, question_id], map: "test_paper_id_2")
  @@index([question_id], map: "FK_Question_TO_TestPaperQuestion_1")
}

model User {
  user_id                         BigInt         @id @default(autoincrement())
  created_at                      DateTime       @db.DateTime(0)
  updated_at                      DateTime       @db.DateTime(0)
  nickname                        String         @unique(map: "nickname") @db.VarChar(64)
  avatar                          String         @db.VarChar(2083)
  BasicUser                       BasicUser?
  OauthUser                       OauthUser?
  Question                        Question[]
  QuestionLike                    QuestionLike[]
  Test                            Test[]
  Workbook_UserToWorkbook_user_id Workbook[]     @relation("UserToWorkbook_user_id")
  WorkbookLike                    WorkbookLike[]
}

model Workbook {
  workbook_id                 BigInt             @id @default(autoincrement())
  title                       String             @db.VarChar(62)
  is_public                   Boolean            @default(false)
  user_id                     BigInt
  created_at                  DateTime           @db.DateTime(0)
  updated_at                  DateTime           @db.DateTime(0)
  description                 String?            @db.VarChar(1000)
  original_id                 BigInt?
  User_UserToWorkbook_user_id User               @relation("UserToWorkbook_user_id", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Workbook_1")
  Workbook                    Workbook?          @relation("WorkbookToWorkbook", fields: [original_id], references: [workbook_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Workbook_To_Workbook")
  other_Workbook              Workbook[]         @relation("WorkbookToWorkbook")
  WorkbookLike                WorkbookLike[]
  WorkbookQuestion            WorkbookQuestion[]
  WorkbookTest                WorkbookTest[]

  @@index([user_id], map: "FK_User_TO_Workbook_1")
  @@index([original_id], map: "FK_Workbook_To_Workbook")
}

model WorkbookLike {
  user_id     BigInt
  workbook_id BigInt
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_WorkbookLike_1")
  Workbook    Workbook @relation(fields: [workbook_id], references: [workbook_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Workbook_TO_WorkbookLike_1")

  @@id([user_id, workbook_id])
  @@index([workbook_id], map: "FK_Workbook_TO_WorkbookLike_1")
}

model WorkbookQuestion {
  workbook_question_id BigInt   @id @default(autoincrement())
  workbook_id          BigInt
  question_id          BigInt
  written_answer       String   @db.VarChar(1000)
  Question             Question @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Question_TO_WorkbookQuestion_1")
  Workbook             Workbook @relation(fields: [workbook_id], references: [workbook_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Workbook_TO_WorkbookQuestion_1")

  @@unique([workbook_id, question_id], map: "workbook_id")
  @@unique([workbook_id, question_id], map: "workbook_id_2")
  @@index([question_id], map: "FK_Question_TO_WorkbookQuestion_1")
}

model WorkbookTest {
  workbook_test_id BigInt   @id @default(autoincrement())
  workbook_id      BigInt
  test_id          BigInt
  count            Int
  Test             Test     @relation(fields: [test_id], references: [test_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Test_TO_WorkbookTest_1")
  Workbook         Workbook @relation(fields: [workbook_id], references: [workbook_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Workbook_TO_WorkbookTest_1")

  @@unique([workbook_id, test_id], map: "workbook_id")
  @@unique([workbook_id, test_id], map: "workbook_id_2")
  @@index([test_id], map: "FK_Test_TO_WorkbookTest_1")
}
